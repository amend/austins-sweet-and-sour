{
  "name": "gramophone",
  "version": "0.0.3",
  "main": "index.js",
  "description": "extracts most frequently used keywords and phrases from text",
  "keywords": [
    "keyword",
    "keywords",
    "natural language",
    "npl"
  ],
  "scripts": {
    "test": "tap test/*"
  },
  "license": "MIT",
  "dependencies": {
    "lodash": "~0.8.2",
    "natural": "~0.1.18",
    "event-stream": "~3.0.8",
    "underscore.string": "~2.3.1"
  },
  "devDependencies": {
    "tap": "~0.3.3"
  },
  "readme": "Gramophone\n==========\n\n[![Build Status](https://secure.travis-ci.org/bxjx/gramophone.png?branch=master)](https://travis-ci.org/bxjx/gramophone)\n\nExtracts most frequently used keywords and phrases from text. It excludes\ncommon stop words. It can be configured to extract arbitary length phrases\n(ngrams) rather than just keywords.\n\n```js\nrequest('https://github.com/substack/stream-handbook/blob/master/readme.markdown')\n  .pipe(gramophone.stream({ngrams: 2, html: true, limit: 2}))\n  .on('data', console.error.bind(console));\n```\n\nWould write out:\n```\nreadable stream\nwritable stream\n```\n\nAPI\n---\n\n  * <a href=\"#extract\"><code>gramophone.<b>extract()</b></code></a>\n  * <a href=\"#stream\"><code>gramophone.<b>stream()</b></code></a>\n  * <a href=\"#transformStream\"><code>gramophone.<b>transformStream()</b></code></a>\n\n--------------------------------------------------------\n<a name=\"extract\"></a>\n### gramophone.extract(text[, options])\n\nSynchronously extracts keywords from the text. By\ndefault it returns any keyword phrases that occur more than once. It also\nremoves any common English words. It returns the results reverse ordered by\nfrequency i.e. the first result is the most common phrase.\n\n```js\nkeyword.extract('beep beep and foo bar and beep beep and beep beep and foo bar')\n```\n\nReturns `['beep beep', 'foo bar']`.\n\n#### Option: score\n\nReturns each keyword as an object where `term` is the keyword and `tf` is the\nnumber of times the phrase was used i.e. the term frequency. Off by default.\n\n```js\nkeyword.extract('beep beep and foo bar and beep beep and beep beep and foo bar', {score: true})\n```\n\nReturns `[{term: 'beep beep', tf: 3}, {term: 'foo bar', tf: 2}]`.\n\n#### Option: limit\n\nReturns the top N results. The default is to not limit the results.\n\n```js\nkeyword.extract('beep beep and foo bar and beep beep and beep beep and foo bar', {limit: 1})\n```\n\nReturns `['beep beep']`.\n\n#### Option: flatten\n\nReturns all occurrences of the ngram. Useful for passing data to Natural's\nTF-IDF function. Note: the original order is not maintained. Off by default.\n\n```js\nkeyword.extract('beep beep and foo bar and beep beep and beep beep and foo bar', {flaten: true})\n```\n\nReturns `['beep beep', 'beep beep', 'beep beep', 'foo bar', 'foo bar']`.\n\n#### Option: html\n\nExtracts the keywords from html text elements. The default is false.\n\n```js\nkeyword.extract('<strong>beep</strong>, <strong>beep</strong> and <strong>foo</strong>', {html: true})\n```\n\nReturns `['beep', 'foo']`.\n\n#### Option: min\n\nOnly returns results with greater than or equal to N occurences. The default value is 2.\n\n```js\nkeyword.extract('beep and beep and beep and foo and foo', {min: 3})\n```\n\nReturns `['beep']`.\n\n#### Option: ngrams\n\nIf ngrams is a number (N), only look for phrases with N words. If ngrams is\na list ([N1, N2]), only look for the phrases with N1 or N2 words etc.. The\ndefualt is too look for [1, 2, 3] word ngrams.\n\n```js\nkeyword.extract('beep and beep and beep bop boop and foo and foo bar', {ngrams: [2, 3]})\n```\n\nReturns `['beep bop boop', 'foo bar']`.\n\n#### Option: stopWords\n\nAdd extra stopWords to be used in addition to the English set.\n\n```js\nkeyword.extract('foo et bar et foo et bar et foo', {stopWords: ['et']})\n```\n\nReturns `['foo', 'bar']`.\n\n#### Option: startWords\n\nAny words in this list are whitelisted even if they are a stop word.\n\n```js\nkeyword.extract('foo and bar with foo and bar', {startWords: ['and']})\n```\n\nReturns `['foo and bar']`\n\n#### Option: stem\n\nApply stemming before extracting keywords. The returned keyword will be the\nmost frequently used word.\n\n```js\nkeyword.extract('fooing and foo and fooing', {stem: true})\n```\n\nReturns `['fooing']`\n\n#### Option: cutoff\n\nAllows you to specify the cutoff for determining whether to include a phrase\nthat is a component of another phrase. E.g. should \"node\" and \"runs\" be\nextracted as keywords as well as \"node runs\".\n\nA component phrase is filtered based on the following formula:\n\n` phrase freq. / component phrase freq. >= 1 - cutoff`\n\nE.g., let's say you have some text that includes the phrase \"node runs\" 20 times,\n\"node\" 40 times and \"runs\" 22 times. If the cutoff was 0.5 (the default),\n\"node\" would be included as `20 / 40 >= 1 - 0.5`. However, \"runs\" would not\nbe returned as a keyword as `20 / 22 < 1 - 0.5`.\n\nWow. I could probably make this more intuitive. Open to suggestions.\n\n--------------------------------------------------------\n<a name=\"stream\"></a>\n### gramophone.stream([options])\n\nReturns a through stream that reads in the text stream and emits keywords\nbased on the options passed. It uses the same options as `extract`. Note: this\nstream behaves like a sink and will buffer the stream completely before emitting\nkeywords.\n\nSee first example.\n\n--------------------------------------------------------\n<a name=\"transformStream\"></a>\n### gramophone.transformStream([options])\n\nReturns a through stream that reads in the stream and emits keywords for each\ndata read. By default, it assumes that each data read in a string. Alternatively\nthe stream can read and write to objects. To read\nthe text from an object property, specify the `from` option. If you want to\nwrite the keywords back to the object, also specify the `to` option.\n\n```js\nvar stream = gramophone.transformStream({from: 'text', to: 'keywords'});\nstream.write({ text: 'foo and bar and foo'});\nstream.end();\n```\n\nEmits the data: `{ text: 'foo and bar and foo', keywords: [foo] }`.\n\nRelated projects\n----------------\n\n  * [node-alchemy](https://github.com/framingeinstein/node-alchemy): \n    a cloud based keyword extraction service.\n  * [natural](https://github.com/NaturalNode/natural): a fantastic natural\n    language processing library for node.js. Checkout\n    [Tf-Idf](https://github.com/NaturalNode/natural#tf-idf) if you're looking\n    to extract keywords based on their relative frequency to other documents.\n    If people are interested, I might add Tf-Idf support to gramophone.\n\nLicence & copyright\n-------------------\n\ngramophone is Copyright (c) 2012 B.J. Rossiter.\n\ngramophone is licensed under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n",
  "readmeFilename": "README.md",
  "_id": "gramophone@0.0.3",
  "dist": {
    "shasum": "1003e27f8eacd4dbc61155555fda3e16d52c1e64",
    "tarball": "https://registry.npmjs.org/gramophone/-/gramophone-0.0.3.tgz"
  },
  "_from": "gramophone@0.0.3",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "bxjx",
    "email": "b.j.rossiter@gmail.com"
  },
  "maintainers": [
    {
      "name": "bxjx",
      "email": "b.j.rossiter@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "1003e27f8eacd4dbc61155555fda3e16d52c1e64",
  "_resolved": "https://registry.npmjs.org/gramophone/-/gramophone-0.0.3.tgz"
}
